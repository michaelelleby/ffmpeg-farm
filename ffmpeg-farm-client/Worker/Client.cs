//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v6.6.6124.16498 (NJsonSchema v4.26.6123.28532) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

namespace FFmpegFarm.Worker.Client
{
    #pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class AudioJobClient 
    {
        public AudioJobClient() : this("http://localhost:9000") { }
    
        public AudioJobClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Create a new job</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Guid> CreateNewAsync(AudioJobRequestModel input)
        {
            return CreateNewAsync(input, CancellationToken.None);
        }
    
        /// <summary>Create a new job</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Guid> CreateNewAsync(AudioJobRequestModel input, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/AudioJob");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(input));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Guid); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Guid>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class ClientClient 
    {
        public ClientClient() : this("http://localhost:9000") { }
    
        public ClientClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<ClientHeartbeat>> GetAsync()
        {
            return GetAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<ClientHeartbeat>> GetAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Client");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ObservableCollection<ClientHeartbeat>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<ClientHeartbeat>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class HealthCheckClient 
    {
        public HealthCheckClient() : this("http://localhost:9000") { }
    
        public HealthCheckClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ServiceStatus> GetAsync()
        {
            return GetAsync(CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ServiceStatus> GetAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/HealthCheck");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ServiceStatus); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ServiceStatus>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class JobClient 
    {
        public JobClient() : this("http://localhost:9000") { }
    
        public JobClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<bool> DeleteJobAsync(Guid jobCorrelationId)
        {
            return DeleteJobAsync(jobCorrelationId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<bool> DeleteJobAsync(Guid jobCorrelationId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Job");
    
            if (jobCorrelationId == null)
                throw new ArgumentNullException("jobCorrelationId");
            else
                url_ += string.Format("jobCorrelationId={0}&", Uri.EscapeDataString(jobCorrelationId.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(bool); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<bool>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<bool> PatchJobAsync(Guid jobCorrelationId, Command command)
        {
            return PatchJobAsync(jobCorrelationId, command, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<bool> PatchJobAsync(Guid jobCorrelationId, Command command, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Job");
    
            if (jobCorrelationId == null)
                throw new ArgumentNullException("jobCorrelationId");
            else
                url_ += string.Format("jobCorrelationId={0}&", Uri.EscapeDataString(jobCorrelationId.ToString()));
    
            if (command == null)
                throw new ArgumentNullException("command");
            else
                url_ += string.Format("command={0}&", Uri.EscapeDataString(command.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("PATCH");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(bool); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<bool>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class MuxJobClient 
    {
        public MuxJobClient() : this("http://localhost:9000") { }
    
        public MuxJobClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Guid> CreateNewAsync(MuxJobRequestModel input)
        {
            return CreateNewAsync(input, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Guid> CreateNewAsync(MuxJobRequestModel input, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/MuxJob");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(input));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Guid); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Guid>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class StatusClient 
    {
        public StatusClient() : this("http://localhost:9000") { }
    
        public StatusClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Get status for all jobs</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<ObservableCollection<FfmpegJobModel>> GetAllAsync()
        {
            return GetAllAsync(CancellationToken.None);
        }
    
        /// <summary>Get status for all jobs</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<ObservableCollection<FfmpegJobModel>> GetAllAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Status");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(ObservableCollection<FfmpegJobModel>); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ObservableCollection<FfmpegJobModel>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Update progress of an active job.
        /// 
        /// This also serves as a heartbeat, to tell the server
        /// that the client is still working actively on the job</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<Response> UpdateProgressAsync(TaskProgressModel model)
        {
            return UpdateProgressAsync(model, CancellationToken.None);
        }
    
        /// <summary>Update progress of an active job.
        /// 
        /// This also serves as a heartbeat, to tell the server
        /// that the client is still working actively on the job</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<Response> UpdateProgressAsync(TaskProgressModel model, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Status");
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(model));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PATCH");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(Response); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<Response>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
        /// <summary>Get status for a specific job</summary>
        /// <param name="id">ID of job to get status of</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<FfmpegJobModel> GetAsync(Guid id)
        {
            return GetAsync(id, CancellationToken.None);
        }
    
        /// <summary>Get status for a specific job</summary>
        /// <param name="id">ID of job to get status of</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<FfmpegJobModel> GetAsync(Guid id, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Status/{id}");
    
            if (id == null)
                throw new ArgumentNullException("id");
            url_ = url_.Replace("{id}", Uri.EscapeDataString(id.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(FfmpegJobModel); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<FfmpegJobModel>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public partial class TaskClient 
    {
        public TaskClient() : this("http://localhost:9000") { }
    
        public TaskClient(string baseUrl)
        {
            BaseUrl = baseUrl; 
        }
    
        partial void PrepareRequest(HttpClient request, ref string url);
    
        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);
    
        public string BaseUrl { get; set; }
    
        /// <summary>Get next waiting task.</summary>
        /// <param name="machineName">Caller-id</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<FFmpegTaskDto> GetNextAsync(string machineName)
        {
            return GetNextAsync(machineName, CancellationToken.None);
        }
    
        /// <summary>Get next waiting task.</summary>
        /// <param name="machineName">Caller-id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<FFmpegTaskDto> GetNextAsync(string machineName, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "api/Task");
    
            if (machineName == null)
                throw new ArgumentNullException("machineName");
            else
                url_ += string.Format("machineName={0}&", Uri.EscapeDataString(machineName.ToString()));
    
            var client_ = new HttpClient();
            var request_ = new HttpRequestMessage();
            PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);
    
            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false); 
            var status_ = ((int)response_.StatusCode).ToString();
    
            if (status_ == "200") 
            {
                var result_ = default(FFmpegTaskDto); 
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<FFmpegTaskDto>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
                    return result_; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }
    
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }
    
    }
    
    

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class AudioJobRequestModel : INotifyPropertyChanged
    { 
        private ObservableCollection<AudioDestinationFormat> _targets = new ObservableCollection<AudioDestinationFormat>(); 
        private string _destinationFilenamePrefix; 
        private string _sourceFilename; 
        private string _outputFolder; 
        private DateTime _needed; 
        private string _inpoint;
    
        [JsonProperty("Targets", Required = Required.Always)]
        [Required]
        public ObservableCollection<AudioDestinationFormat> Targets
        {
            get { return _targets; }
            set 
            {
                if (_targets != value)
                {
                    _targets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DestinationFilenamePrefix", Required = Required.Always)]
        [Required]
        public string DestinationFilenamePrefix
        {
            get { return _destinationFilenamePrefix; }
            set 
            {
                if (_destinationFilenamePrefix != value)
                {
                    _destinationFilenamePrefix = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("SourceFilename", Required = Required.Always)]
        [Required]
        public string SourceFilename
        {
            get { return _sourceFilename; }
            set 
            {
                if (_sourceFilename != value)
                {
                    _sourceFilename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("OutputFolder", Required = Required.Always)]
        [Required]
        public string OutputFolder
        {
            get { return _outputFolder; }
            set 
            {
                if (_outputFolder != value)
                {
                    _outputFolder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Needed", Required = Required.Always)]
        [Required]
        public DateTime Needed
        {
            get { return _needed; }
            set 
            {
                if (_needed != value)
                {
                    _needed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Inpoint", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Inpoint
        {
            get { return _inpoint; }
            set 
            {
                if (_inpoint != value)
                {
                    _inpoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static AudioJobRequestModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AudioJobRequestModel>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class AudioDestinationFormat : INotifyPropertyChanged
    { 
        private AudioDestinationFormatAudioCodec? _audioCodec; 
        private AudioDestinationFormatFormat? _format; 
        private int? _bitrate; 
        private AudioDestinationFormatChannels? _channels;
    
        [JsonProperty("AudioCodec", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public AudioDestinationFormatAudioCodec? AudioCodec
        {
            get { return _audioCodec; }
            set 
            {
                if (_audioCodec != value)
                {
                    _audioCodec = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Format", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public AudioDestinationFormatFormat? Format
        {
            get { return _format; }
            set 
            {
                if (_format != value)
                {
                    _format = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Bitrate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Bitrate
        {
            get { return _bitrate; }
            set 
            {
                if (_bitrate != value)
                {
                    _bitrate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Channels", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public AudioDestinationFormatChannels? Channels
        {
            get { return _channels; }
            set 
            {
                if (_channels != value)
                {
                    _channels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static AudioDestinationFormat FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AudioDestinationFormat>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class ClientHeartbeat : INotifyPropertyChanged
    { 
        private string _machineName; 
        private DateTime? _lastHeartbeat;
    
        [JsonProperty("MachineName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MachineName
        {
            get { return _machineName; }
            set 
            {
                if (_machineName != value)
                {
                    _machineName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("LastHeartbeat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? LastHeartbeat
        {
            get { return _lastHeartbeat; }
            set 
            {
                if (_lastHeartbeat != value)
                {
                    _lastHeartbeat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ClientHeartbeat FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ClientHeartbeat>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class ServiceStatus : INotifyPropertyChanged
    { 
        private ObservableCollection<WorkerStatus> _workers;
    
        [JsonProperty("Workers", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<WorkerStatus> Workers
        {
            get { return _workers; }
            set 
            {
                if (_workers != value)
                {
                    _workers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static ServiceStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ServiceStatus>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class WorkerStatus : INotifyPropertyChanged
    { 
        private string _workerName; 
        private WorkerStatusStatus? _status;
    
        [JsonProperty("WorkerName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WorkerName
        {
            get { return _workerName; }
            set 
            {
                if (_workerName != value)
                {
                    _workerName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public WorkerStatusStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static WorkerStatus FromJson(string data)
        {
            return JsonConvert.DeserializeObject<WorkerStatus>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class MuxJobRequestModel : INotifyPropertyChanged
    { 
        private string _videoSourceFilename; 
        private string _audioSourceFilename; 
        private string _destinationFilename; 
        private string _outputFolder; 
        private DateTime _needed; 
        private string _inpoint;
    
        [JsonProperty("VideoSourceFilename", Required = Required.Always)]
        [Required]
        public string VideoSourceFilename
        {
            get { return _videoSourceFilename; }
            set 
            {
                if (_videoSourceFilename != value)
                {
                    _videoSourceFilename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("AudioSourceFilename", Required = Required.Always)]
        [Required]
        public string AudioSourceFilename
        {
            get { return _audioSourceFilename; }
            set 
            {
                if (_audioSourceFilename != value)
                {
                    _audioSourceFilename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DestinationFilename", Required = Required.Always)]
        [Required]
        public string DestinationFilename
        {
            get { return _destinationFilename; }
            set 
            {
                if (_destinationFilename != value)
                {
                    _destinationFilename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("OutputFolder", Required = Required.Always)]
        [Required]
        public string OutputFolder
        {
            get { return _outputFolder; }
            set 
            {
                if (_outputFolder != value)
                {
                    _outputFolder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Needed", Required = Required.Always)]
        [Required]
        public DateTime Needed
        {
            get { return _needed; }
            set 
            {
                if (_needed != value)
                {
                    _needed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Inpoint", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Inpoint
        {
            get { return _inpoint; }
            set 
            {
                if (_inpoint != value)
                {
                    _inpoint = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static MuxJobRequestModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<MuxJobRequestModel>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class FfmpegJobModel : INotifyPropertyChanged
    { 
        private Guid? _jobCorrelationId; 
        private FfmpegJobModelState? _state; 
        private DateTime? _created; 
        private DateTime? _needed; 
        private ObservableCollection<FfmpegTaskModel> _tasks;
    
        [JsonProperty("JobCorrelationId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Guid? JobCorrelationId
        {
            get { return _jobCorrelationId; }
            set 
            {
                if (_jobCorrelationId != value)
                {
                    _jobCorrelationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("State", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public FfmpegJobModelState? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Created", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Needed", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Needed
        {
            get { return _needed; }
            set 
            {
                if (_needed != value)
                {
                    _needed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Tasks", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<FfmpegTaskModel> Tasks
        {
            get { return _tasks; }
            set 
            {
                if (_tasks != value)
                {
                    _tasks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static FfmpegJobModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<FfmpegJobModel>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class FfmpegTaskModel : INotifyPropertyChanged
    { 
        private double? _progress; 
        private FfmpegTaskModelState? _state; 
        private DateTime? _heartbeat; 
        private string _heartbeatMachine; 
        private string _destinationFilename;
    
        [JsonProperty("Progress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Progress
        {
            get { return _progress; }
            set 
            {
                if (_progress != value)
                {
                    _progress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("State", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public FfmpegTaskModelState? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Heartbeat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Heartbeat
        {
            get { return _heartbeat; }
            set 
            {
                if (_heartbeat != value)
                {
                    _heartbeat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("HeartbeatMachine", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HeartbeatMachine
        {
            get { return _heartbeatMachine; }
            set 
            {
                if (_heartbeatMachine != value)
                {
                    _heartbeatMachine = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DestinationFilename", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DestinationFilename
        {
            get { return _destinationFilename; }
            set 
            {
                if (_destinationFilename != value)
                {
                    _destinationFilename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static FfmpegTaskModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<FfmpegTaskModel>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class TaskProgressModel : INotifyPropertyChanged
    { 
        private int _id; 
        private string _machineName; 
        private bool _failed; 
        private bool _done; 
        private string _progress;
    
        [JsonProperty("Id", Required = Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("MachineName", Required = Required.Always)]
        [Required]
        public string MachineName
        {
            get { return _machineName; }
            set 
            {
                if (_machineName != value)
                {
                    _machineName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Failed", Required = Required.Always)]
        public bool Failed
        {
            get { return _failed; }
            set 
            {
                if (_failed != value)
                {
                    _failed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Done", Required = Required.Always)]
        public bool Done
        {
            get { return _done; }
            set 
            {
                if (_done != value)
                {
                    _done = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Progress", Required = Required.Always)]
        [Required]
        public string Progress
        {
            get { return _progress; }
            set 
            {
                if (_progress != value)
                {
                    _progress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static TaskProgressModel FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TaskProgressModel>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public partial class FFmpegTaskDto : INotifyPropertyChanged
    { 
        private int? _id; 
        private int? _ffmpegJobsId; 
        private string _arguments; 
        private FFmpegTaskDtoState? _state; 
        private DateTime? _started; 
        private DateTime? _heartbeat; 
        private string _heartbeatMachineName; 
        private double? _progress; 
        private int? _destinationDurationSeconds; 
        private string _destinationFilename;
    
        [JsonProperty("Id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("FfmpegJobsId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? FfmpegJobsId
        {
            get { return _ffmpegJobsId; }
            set 
            {
                if (_ffmpegJobsId != value)
                {
                    _ffmpegJobsId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Arguments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Arguments
        {
            get { return _arguments; }
            set 
            {
                if (_arguments != value)
                {
                    _arguments = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("State", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public FFmpegTaskDtoState? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Started", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Started
        {
            get { return _started; }
            set 
            {
                if (_started != value)
                {
                    _started = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Heartbeat", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Heartbeat
        {
            get { return _heartbeat; }
            set 
            {
                if (_heartbeat != value)
                {
                    _heartbeat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("HeartbeatMachineName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string HeartbeatMachineName
        {
            get { return _heartbeatMachineName; }
            set 
            {
                if (_heartbeatMachineName != value)
                {
                    _heartbeatMachineName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("Progress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Progress
        {
            get { return _progress; }
            set 
            {
                if (_progress != value)
                {
                    _progress = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DestinationDurationSeconds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? DestinationDurationSeconds
        {
            get { return _destinationDurationSeconds; }
            set 
            {
                if (_destinationDurationSeconds != value)
                {
                    _destinationDurationSeconds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [JsonProperty("DestinationFilename", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DestinationFilename
        {
            get { return _destinationFilename; }
            set 
            {
                if (_destinationFilename != value)
                {
                    _destinationFilename = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public event PropertyChangedEventHandler PropertyChanged;
    
        public string ToJson() 
        {
            return JsonConvert.SerializeObject(this);
        }
        
        public static FFmpegTaskDto FromJson(string data)
        {
            return JsonConvert.DeserializeObject<FFmpegTaskDto>(data);
        }
        
        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum Command
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Pause")]
        Pause = 1,
    
        [EnumMember(Value = "Resume")]
        Resume = 2,
    
        [EnumMember(Value = "Cancel")]
        Cancel = 3,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum Response
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Queued")]
        Queued = 1,
    
        [EnumMember(Value = "Paused")]
        Paused = 2,
    
        [EnumMember(Value = "InProgress")]
        InProgress = 3,
    
        [EnumMember(Value = "Done")]
        Done = 4,
    
        [EnumMember(Value = "Failed")]
        Failed = 5,
    
        [EnumMember(Value = "Canceled")]
        Canceled = 6,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum AudioDestinationFormatAudioCodec
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "MP3")]
        MP3 = 1,
    
        [EnumMember(Value = "AAC")]
        AAC = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum AudioDestinationFormatFormat
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "MP4")]
        MP4 = 1,
    
        [EnumMember(Value = "MKV")]
        MKV = 2,
    
        [EnumMember(Value = "AAC")]
        AAC = 3,
    
        [EnumMember(Value = "MP3")]
        MP3 = 4,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum AudioDestinationFormatChannels
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Mono")]
        Mono = 1,
    
        [EnumMember(Value = "Stereo")]
        Stereo = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum WorkerStatusStatus
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "OK")]
        OK = 1,
    
        [EnumMember(Value = "NonResponsive")]
        NonResponsive = 2,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum FfmpegJobModelState
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Queued")]
        Queued = 1,
    
        [EnumMember(Value = "Paused")]
        Paused = 2,
    
        [EnumMember(Value = "InProgress")]
        InProgress = 3,
    
        [EnumMember(Value = "Done")]
        Done = 4,
    
        [EnumMember(Value = "Failed")]
        Failed = 5,
    
        [EnumMember(Value = "Canceled")]
        Canceled = 6,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum FfmpegTaskModelState
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Queued")]
        Queued = 1,
    
        [EnumMember(Value = "Paused")]
        Paused = 2,
    
        [EnumMember(Value = "InProgress")]
        InProgress = 3,
    
        [EnumMember(Value = "Done")]
        Done = 4,
    
        [EnumMember(Value = "Failed")]
        Failed = 5,
    
        [EnumMember(Value = "Canceled")]
        Canceled = 6,
    
    }
    
    [GeneratedCode("NJsonSchema", "4.26.6123.28532")]
    public enum FFmpegTaskDtoState
    {
        [EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [EnumMember(Value = "Queued")]
        Queued = 1,
    
        [EnumMember(Value = "Paused")]
        Paused = 2,
    
        [EnumMember(Value = "InProgress")]
        InProgress = 3,
    
        [EnumMember(Value = "Done")]
        Done = 4,
    
        [EnumMember(Value = "Failed")]
        Failed = 5,
    
        [EnumMember(Value = "Canceled")]
        Canceled = 6,
    
    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public class FileParameter
    {
        public FileParameter(Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "6.6.6124.16498")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}